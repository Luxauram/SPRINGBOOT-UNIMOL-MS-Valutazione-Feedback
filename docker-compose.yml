services:
  # Api-Gateway
  api-gateway:
    container_name: unimol-api-gateway
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # JWT configuration
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      # Whitelist di endpoint pubblici
      GATEWAY_PUBLIC_ENDPOINTS: "/api/v1/auth/login,/api/v1/auth/refresh-token,/api/v1/users/superadmin/init,/swagger-ui/**,/v3/api-docs/**,/webjars/**,/actuator/**,/api/*/actuator/**,/api/v1/*/v3/api-docs"
    depends_on:
      microservice-user-role:
        condition: service_started
      microservice-assessment-feedback:
        condition: service_started
    networks:
      - unimol-network

  # Microservizio: User Role Service
  microservice-user-role:
    container_name: unimol-microservice-user-role
    build:
      context: .
      dockerfile: microservice-user-role/Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-users:5432/${DB_PG_NAME_UR:-utenti_db}
      SPRING_DATASOURCE_USERNAME: ${DB_PG_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${DB_PG_PASSWORD:-password}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${DATA_SOURCE_DRIVER_CLASS_NAME:-org.postgresql.Driver}
      # RabbitMQ configuration
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST_DOCKER}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      # RabbitMQ Queue Configuration
      RABBITMQ_EXCHANGE_USERS: ${RABBITMQ_EXCHANGE_USERS:-unimol.exchange}
      RABBITMQ_QUEUE_USER_CREATED: ${RABBITMQ_QUEUE_USER_CREATED:-user.created}
      RABBITMQ_QUEUE_USER_UPDATED: ${RABBITMQ_QUEUE_USER_UPDATED:-user.updated}
      RABBITMQ_QUEUE_USER_DELETED: ${RABBITMQ_QUEUE_USER_DELETED:-user.deleted}
      RABBITMQ_QUEUE_ROLE_ASSIGNED: ${RABBITMQ_QUEUE_ROLE_ASSIGNED:-role.assigned}
      # RABBITMQ_QUEUE_TEACHER_CREATED: ${RABBITMQ_QUEUE_TEACHER_CREATED:-teacher.created.queue}
      # RABBITMQ_QUEUE_STUDENT_CREATED: ${RABBITMQ_QUEUE_STUDENT_CREATED:-student.created.queue}
      # JWT configuration
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-users:
        condition: service_healthy
    networks:
      - unimol-network

  # Microservizio: Assessment Feedback Service
  microservice-assessment-feedback:
    container_name: unimol-microservice-assessment-feedback
    build:
      context: .
      dockerfile: microservice-assessment-feedback/Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-assessment:5432/${DB_PG_NAME_AF:-assessment_feedback_db}
      SPRING_DATASOURCE_USERNAME: ${DB_PG_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${DB_PG_PASSWORD:-password}
      # RabbitMQ configuration
      SPRING_RABBITMQ_HOST: ${RABBITMQ_HOST_DOCKER}
      SPRING_RABBITMQ_PORT: ${RABBITMQ_PORT}
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      # Dead Letter Queue Configuration
      RABBITMQ_EXCHANGE_DLX: ${RABBITMQ_EXCHANGE_DLX:-unimol.dlx}
      RABBITMQ_QUEUE_DLQ: ${RABBITMQ_QUEUE_DLQ:-unimol.dlq}
      RABBITMQ_MSG_TTL: ${RABBITMQ_MSG_TTL:-86400000}
      # Assessment-Feedback Publisher Queues
      RABBITMQ_EXCHANGE_ASSESSMENTS: ${RABBITMQ_EXCHANGE_ASSESSMENTS:-unimol.exchange}
      # Assessment Queues
      RABBITMQ_QUEUE_ASSESSMENT_CREATED: ${RABBITMQ_QUEUE_ASSESSMENT_CREATED:-assessment.created.queue}
      RABBITMQ_QUEUE_ASSESSMENT_UPDATED: ${RABBITMQ_QUEUE_ASSESSMENT_UPDATED:-assessment.updated.queue}
      RABBITMQ_QUEUE_ASSESSMENT_DELETED: ${RABBITMQ_QUEUE_ASSESSMENT_DELETED:-assessment.deleted.queue}
      # Feedback Queues
      RABBITMQ_QUEUE_FEEDBACK_CREATED: ${RABBITMQ_QUEUE_FEEDBACK_CREATED:-feedback.created.queue}
      RABBITMQ_QUEUE_FEEDBACK_UPDATED: ${RABBITMQ_QUEUE_FEEDBACK_UPDATED:-feedback.updated.queue}
      RABBITMQ_QUEUE_FEEDBACK_DELETED: ${RABBITMQ_QUEUE_FEEDBACK_DELETED:-feedback.deleted.queue}
      # Survey Queues
      RABBITMQ_QUEUE_SURVEY_COMPLETED: ${RABBITMQ_QUEUE_SURVEY_COMPLETED:-survey.completed.queue}
      RABBITMQ_QUEUE_SURVEY_RESPONSE_SUBMITTED: ${RABBITMQ_QUEUE_SURVEY_RESPONSE_SUBMITTED:-survey.response.submitted.queue}
      RABBITMQ_QUEUE_SURVEY_RESPONSES_BULK: ${RABBITMQ_QUEUE_SURVEY_RESPONSES_BULK:-survey.responses.bulk.submitted.queue}
      RABBITMQ_QUEUE_SURVEY_RESULTS_REQUESTED: ${RABBITMQ_QUEUE_SURVEY_RESULTS_REQUESTED:-survey.results.requested.queue}
      RABBITMQ_QUEUE_SURVEY_COMMENTS_REQUESTED: ${RABBITMQ_QUEUE_SURVEY_COMMENTS_REQUESTED:-survey.comments.requested.queue}
      # Consumer queues
      # Assignment Queues
      # RABBITMQ_QUEUE_ASSIGNMENT_CREATED: ${RABBITMQ_QUEUE_ASSIGNMENT_CREATED:-assignment.created.queue}
      RABBITMQ_QUEUE_ASSIGNMENT_UPDATED: ${RABBITMQ_QUEUE_ASSIGNMENT_UPDATED:-assignment.updated.queue}
      RABBITMQ_QUEUE_ASSIGNMENT_SUBMITTED: ${RABBITMQ_QUEUE_ASSIGNMENT_SUBMITTED:-assignment.submitted.queue}
      # Exam Queues
      RABBITMQ_QUEUE_EXAM_GRADE_REGISTERED: ${RABBITMQ_QUEUE_EXAM_GRADE_REGISTERED:-exam.grade.registered.queue}
      RABBITMQ_QUEUE_EXAM_COMPLETED: ${RABBITMQ_QUEUE_EXAM_COMPLETED:-exam.completed.queue}
      # Course Management Queues
      RABBITMQ_QUEUE_COURSE_CREATED: ${RABBITMQ_QUEUE_COURSE_CREATED:-course.created.queue}
      RABBITMQ_QUEUE_COURSE_DELETED: ${RABBITMQ_QUEUE_COURSE_DELETED:-course.deleted.queue}
      # JWT configuration
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      # DataFaker configuration
      APP_DATA_FAKER_ENABLED: true
      APP_DATA_FAKER_LOCALE: it
      APP_DATA_FAKER_ASSESSMENTS_COUNT: 50
      APP_DATA_FAKER_FEEDBACKS_COUNT: 150
      APP_DATA_FAKER_RESET_ON_STARTUP: false
      APP_DATA_FAKER_FORCE_RELOAD: false
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-assessment:
        condition: service_healthy
    networks:
      - unimol-network

  # ====================== RABBITMQ Message Broker ==========================
  # Servizio RabbitMQ
  rabbitmq:
    container_name: unimol-rabbitmq
    image: rabbitmq:3.12-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - unimol-network

  # ====================== DBs POSTGRES ==========================
  # Servizio PostgreSQL - User & Role
  postgres-users:
    container_name: unimol-postgres-users
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_PG_NAME_UR:-utenti_db}
      POSTGRES_USER: ${DB_PG_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PG_PASSWORD:-password}
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d utenti_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_users_data:/var/lib/postgresql/data
    networks:
      - unimol-network

  # Servizio PostgreSQL - Assesment & Feedback
  postgres-assessment:
    container_name: unimol-postgres-assessment
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${DB_PG_NAME_AF:-assessment_feedback_db}
      POSTGRES_USER: ${DB_PG_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PG_PASSWORD:-password}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d assessment_feedback_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_assessments_data:/var/lib/postgresql/data
    networks:
      - unimol-network

# Reti condivise
networks:
  unimol-network:
    driver: bridge

# Volumi persistenza dati
volumes:
  postgres_users_data:
  postgres_assessments_data: